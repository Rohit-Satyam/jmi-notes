ggviolin(df, x="batch",y="perc", color = "group", outlier.shape = NA,fill = "group",palette = c('#0047AB','#FF43F4'),add = "boxplot",add.params = list(fill = "white"))+
stat_compare_means(aes(group=group),label.y = 0.019, label="p.format", size=3)+xlab("Samples")+ylab("Avg. Var-Gene Expression")+theme_classic()+theme(text = element_text(face="bold",color="black",size = 10),
legend.title = element_blank(),
legend.text = element_text(face = "bold",color = "black",size = 10))+coord_cartesian(ylim = c(0, 0.02))
ggboxplot(df, x="batch",y="perc", color = "group", outlier.shape = NA,palette = c('#FF43F4','#0047AB',))+stat_compare_means(aes(group=group),label.y = 0.010, label="p.format", size=3)+xlab("Samples")+ylab("Avg. Var-Gene Expression")+theme_classic()+theme(text = element_text(face="bold",color="black",size = 11),legend.title = element_blank(),legend.text = element_text(face = "bold",color = "black",size = 11))+geom_jitter(size=0.001, alpha=0.1)+coord_cartesian(ylim = c(0, 0.012))
ggboxplot(df, x="batch",y="perc", color = "group", outlier.shape = NA,palette = c('#FF43F4','#0047AB'))+stat_compare_means(aes(group=group),label.y = 0.010, label="p.format", size=3)+xlab("Samples")+ylab("Avg. Var-Gene Expression")+theme_classic()+theme(text = element_text(face="bold",color="black",size = 11),legend.title = element_blank(),legend.text = element_text(face = "bold",color = "black",size = 11))+geom_jitter(size=0.001, alpha=0.1)+coord_cartesian(ylim = c(0, 0.012))
ggviolin(df, x="batch",y="perc", color = "group", outlier.shape = NA,fill = "group",palette = c('#0047AB','#FF43F4'),add = "boxplot",add.params = list(fill = "white"))+
stat_compare_means(aes(group=group),label.y = 0.019, label="p.format", size=3)+xlab("Samples")+ylab("Avg. Var-Gene Expression")+theme_classic()+theme(text = element_text(face="bold",color="black",size = 10),
legend.title = element_blank(),
legend.text = element_text(face = "bold",color = "black",size = 10))+coord_cartesian(ylim = c(0, 0.02))
ggviolin(df, x="batch",y="perc", color = "group", outlier.shape = NA,fill = "group",palette = c('#FF43F4','#0047AB'),add = "boxplot",add.params = list(fill = "white"))+
stat_compare_means(aes(group=group),label.y = 0.019, label="p.format", size=3)+xlab("Samples")+ylab("Avg. Var-Gene Expression")+theme_classic()+theme(text = element_text(face="bold",color="black",size = 10),
legend.title = element_blank(),
legend.text = element_text(face = "bold",color = "black",size = 10))+coord_cartesian(ylim = c(0, 0.02))
df$group
## Reorder violins
df$group <- factor(df$group,levels = c("Normal (D)","Knockout (R)"))
ggviolin(df, x="batch",y="perc", color = "group", outlier.shape = NA,fill = "group",palette = c('#FF43F4','#0047AB'),add = "boxplot",add.params = list(fill = "white"))+
stat_compare_means(aes(group=group),label.y = 0.019, label="p.format", size=3)+xlab("Samples")+ylab("Avg. Var-Gene Expression")+theme_classic()+theme(text = element_text(face="bold",color="black",size = 10),
legend.title = element_blank(),
legend.text = element_text(face = "bold",color = "black",size = 10))+coord_cartesian(ylim = c(0, 0.02))
ggviolin(df, x="batch",y="perc", color = "group", outlier.shape = NA,fill = "group",palette = c('#0047AB','#FF43F4'),add = "boxplot",add.params = list(fill = "white"))+
stat_compare_means(aes(group=group),label.y = 0.019, label="p.format", size=3)+xlab("Samples")+ylab("Avg. Var-Gene Expression")+theme_classic()+theme(text = element_text(face="bold",color="black",size = 10),
legend.title = element_blank(),
legend.text = element_text(face = "bold",color = "black",size = 10))+coord_cartesian(ylim = c(0, 0.02))
a <- c("C","B","A","A","A","C","A","B","C","B")
a
length(a)
a[1]
3mer <- function(str){
for(i in length(str)){
paste0(str[i],str[i+1],str[i+2])
}
}
alph3mer <- function(str){
for(i in length(str)){
paste0(str[i],str[i+1],str[i+2])
}
}
alph3mer(a)
alph3mer <- function(str){
for(i in length(str)){
t <- paste0(str[i],str[i+1],str[i+2])
return(t)
}
}
alph3mer(a)
alph3mer <- function(str){
t <- list()
for(i in length(str)){
t[i] <- paste0(str[i],str[i+1],str[i+2])
}
return(t)
}
alph3mer(a)
paste0(a[1],a[2])
paste0(a[1],a[1+1])
a
alph3mer <- function(str){
t <- list()
for(i in length(str)){
t[i] <- paste0(str[i],str[i+1],str[i+2])
}
return(t)
}
a <- c("C","B","A","A","A","C","A","B","C","B")
alph3mer(a)
alph3mer <- function(str){
t <- list()
for(i in 1:length(str)){
t[i] <- paste0(str[i],str[i+1],str[i+2])
}
return(t)
}
alph3mer(a)
b <- c("C","B","A","A","A","C","A","B","C")
alph3mer(b)
alph3mer(a)
alph3mer <- function(str){
t <- list()
l <- length(str)-2
for(i in 1:l){
t[i] <- paste0(str[i],str[i+1],str[i+2])
}
return(t)
}
alph3mer(a)
alph3mer(b)
tt <- alph3mer(b)
as.data.frame(tt)
data.frame(tt)
as.data.frame(t(tt))
ttt <- as.data.frame(t(tt))
ttt
View(ttt)
t(as.data.frame(tt))
ttt <- t(as.data.frame(tt))
ttt <- t(as.data.frame(t(tt))
)
library(stringi)
stri_duplicated(c('a', 'b', 'a', NA, 'a', NA))
alph3mer <- function(str){
t <- list()
l <- length(str)-2
for(i in 1:l){
t[i] <- paste0(str[i],str[i+1],str[i+2])
}
t <- t(as.data.frame(t(tt)))
t <- union(t[1])
return(t)
}
alph3mer(a)
alph3mer <- function(str){
t <- list()
l <- length(str)-2
for(i in 1:l){
t[i] <- paste0(str[i],str[i+1],str[i+2])
}
t <- t(as.data.frame(t(tt)))
t <- unique(t[1])
return(t)
}
alph3mer(a)
alph3mer <- function(str){
t <- list()
l <- length(str)-2
for(i in 1:l){
t[i] <- paste0(str[i],str[i+1],str[i+2])
}
t <- t(as.data.frame(t(tt)))
t <- unique(t[,1])
return(t)
}
alph3mer(a)
alph3mer <- function(str){
t <- list()
l <- length(str)-2
for(i in 1:l){
t[i] <- paste0(str[i],str[i+1],str[i+2])
}
t <- t(as.data.frame(t(tt)))
return(t)
}
alph3mer(a)
ttt <- alph3mer(a)
View(ttt)
class(ttt)
alph3mer <- function(str){
t <- list()
l <- length(str)-2
for(i in 1:l){
t[i] <- paste0(str[i],str[i+1],str[i+2])
}
t <- t(as.data.frame(t(tt)))
return(data.frame(t))
}
ttt <- alph3mer(a)
View(ttt)
b <- c("C","B","A","A","A","C","A","B","C","C","A","C","B","A","A","A","C","A","B","C","C","A")
ttt <- alph3mer(b)
View(ttt)
b <- c("C","B","A","A","A","C","A","B","C","C","A","C","B","A","A","A","C","A","B","C","C","A")
b
alph3mer(b)
alph3mer <- function(str){
t <- list()
l <- length(str)-2
for(i in 1:l){
t[i] <- paste0(str[i],str[i+1],str[i+2])
}
t <- t(as.data.frame(tt))
return(data.frame(t))
}
alph3mer(b)
b <- c("C","B","A","A","A","C","A","B","C","C","A","C","B","A","A","A","C","A","B","C","C","A")
t <- list()
l <- length(str)-2
l
l <- length(b)-2
l
for(i in 1:l){
t[i] <- paste0(str[i],str[i+1],str[i+2])
}
str <- a
for(i in 1:l){
t[i] <- paste0(str[i],str[i+1],str[i+2])
}
t
paste0(str[9],str[9+1],str[9+2])
b
b
paste0(str[9],str[9+1],str[9+2])
str[11]
length(str)
str
str <- b
length(str)
rm(str)
rm(l)
rm(i)
alph3mer <- function(str){
t <- list()
l <- length(str)-2
for(i in 1:l){
t[i] <- paste0(str[i],str[i+1],str[i+2])
}
t <- t(as.data.frame(tt))
return(data.frame(t))
}
alph3mer(b)
rm(r)
rm(t,tt,ttt)
alph3mer(b)
alph3mer <- function(str){
t <- list()
l <- length(str)-2
for(i in 1:l){
t[i] <- paste0(str[i],str[i+1],str[i+2])
}
t <- t(as.data.frame(tt))
return(data.frame(t))
}
alph3mer(b)
alph3mer <- function(str){
t <- list()
l <- length(str)-2
for(i in 1:l){
t[i] <- paste0(str[i],str[i+1],str[i+2])
}
t <- t(as.data.frame(t))
return(data.frame(t))
}
alph3mer(b)
tt <- alph3mer(b)
sum(str_count(tt$t, "CAB"))
library(stringr)
sum(str_count(tt$t, "CAB"))
alph3mer <- function(str){
t <- list()
l <- length(str)-2
for(i in 1:l){
t[i] <- paste0(str[i],str[i+1],str[i+2])
}
t <- t(as.data.frame(t(t)))
return(data.frame(t))
}
b <- c("C","B","A","A","A","C","A","B","C","C","A","C","B","A","A","A","C","A","B","C","C","A")
alph3mer(b)
tt <- alph3mer(b)
sum(str_count(tt$t, "CAB"))
sum(str_count(tt$t, "ABC"))
sum(str_count(tt$t, "ACB"))
sum(str_count(tt$t, "BAC"))
sum(str_count(tt$t, "BCA"))
sum(str_count(tt$t, "CAB"))
sum(str_count(tt$t, "CBA"))
install.packages("deepredeff")
library(deepredeff)
install_tensorflow()
library(reticulate)
gc()
gc()
p.combined.with.mca <- readRDS("p.ready.for.VarGene.analysis.rds")
gc()
gc()
library(DESeq2)
library(ggplot2)
library("BiocParallel")
library(org.Hs.eg.db)
library(dplyr)
library(tibble)
setwd("~/assignment3")
cts <- as.matrix(read.csv("GSE160435_count.csv",row.names=1))
read.csv("GSE160435_count.csv",row.names = 1)
read.csv("GSE160435_count.csv")
file <- read.csv("GSE160435_count.csv")
View(file)
seq_len(file$X)
length(file$X)
seq_len(1:length(file$X))
seq_len(length(file$X))
file$X <- paste0(seq_len(length(file$X)),file$X)
file <- read.csv("GSE160435_count.csv")
file$X <- paste0(seq_len(length(file$X)),"_",file$X)
rownames(file) <- file$X
file <- file[,-1]
cts <- as.matrix(file)
View(cts)
coldata <- colnames(cts)
coldata
coldata <- data.frame(sample=colnames(cts),batch=c("covid","covid","covid","mock","mock","mock"))
View(coldata)
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ batch)
dds
dds$batch
dds$batch <- <- relevel(dds$batch, ref = "mock")
dds$batch <- relevel(dds$batch, ref = "mock")
dds$batch
vsd = vst(object = dds, blind = TRUE,# do not take the design formula into account; best practice for sample-level QC
fitType = "parametric")
plotPCA(vsd, intgroup = c("batch"))
pcaData <- plotPCA(vsd, intgroup = c( "category"), returnData = TRUE)
pcaData <- plotPCA(vsd, intgroup = c( "batch"), returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
t <- ggplot(pcaData, aes(x = PC1, y = PC2, color = batch, label=name)) +
geom_point(size =3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed() +
ggtitle("PCA with VST data") +theme_bw()+theme(axis.text.x = element_text(face="bold", color="black", size=12),axis.text.y = element_text(face="bold", color="black", size=12))+theme(axis.title.x = element_text(face="bold", colour = "black", size=12), axis.title.y = element_text(face="bold", colour = "black", size=12))+theme(legend.text=element_text(size=12),legend.title=element_text(size=14))
t
t+geom_text_repel()
library(ggrepel)
t+geom_text_repel()
t <- cor(assay(vsd))
colData(vsd)
colData(vsd)$batch
rownames(t) <- paste(colData(vsd)$batch,rownames(t), sep = " : ")
pheatmap(t)
# setwd("~/assignment3")
library(DESeq2)
library(ggplot2)
library("BiocParallel")
library(org.Hs.eg.db)
library(dplyr)
library(tibble)
library(ggrepel)
library(pheatmap)
library(ComplexHeatmap)
set.seed(1000)
pheatmap(t)
View(coldata)
coldata <- data.frame(sample=colnames(cts),batch=c("covid","covid","covid","mock","mock","mock"),category=c("covid-20","covid-20","covid-19","mock-20","mock-20","mock-19"))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ batch)
dds$batch
## Changing the reference level to mock samples
dds$batch <- relevel(dds$batch, ref = "mock")
dds$batch
vsd = vst(object = dds, blind = TRUE,# do not take the design formula into account; best practice for sample-level QC
fitType = "parametric")
pcaData <- plotPCA(vsd, intgroup = c("batch","category"), returnData = TRUE)
pcaData
percentVar <- round(100 * attr(pcaData, "percentVar"))
t <- ggplot(pcaData, aes(x = PC1, y = PC2, color = batch, label=name)) +
geom_point(size =3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed() +
ggtitle("PCA with VST data") +theme_bw()+theme(axis.text.x = element_text(face="bold", color="black", size=12),axis.text.y = element_text(face="bold", color="black", size=12))+theme(axis.title.x = element_text(face="bold", colour = "black", size=12), axis.title.y = element_text(face="bold", colour = "black", size=12))+theme(legend.text=element_text(size=12),legend.title=element_text(size=14))
t+geom_text_repel()
t <- ggplot(pcaData, aes(x = PC1, y = PC2, color = category, label=name)) +
geom_point(size =3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed() +
ggtitle("PCA with VST data") +theme_bw()+theme(axis.text.x = element_text(face="bold", color="black", size=12),axis.text.y = element_text(face="bold", color="black", size=12))+theme(axis.title.x = element_text(face="bold", colour = "black", size=12), axis.title.y = element_text(face="bold", colour = "black", size=12))+theme(legend.text=element_text(size=12),legend.title=element_text(size=14))
t+geom_text_repel()
coldata <- data.frame(sample=colnames(cts),batch=c("covid","covid","covid","mock","mock","mock"),category=c("20","20","19","20","20","19"))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ batch)
dds$batch
## Changing the reference level to mock samples
dds$batch <- relevel(dds$batch, ref = "mock")
dds$batch
vsd = vst(object = dds, blind = TRUE,# do not take the design formula into account; best practice for sample-level QC
fitType = "parametric")
pcaData <- plotPCA(vsd, intgroup = c("batch","category"), returnData = TRUE)
pcaData
percentVar <- round(100 * attr(pcaData, "percentVar"))
t <- ggplot(pcaData, aes(x = PC1, y = PC2, color = category, label=name)) +
geom_point(size =3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed() +
ggtitle("PCA with VST data") +theme_bw()+theme(axis.text.x = element_text(face="bold", color="black", size=12),axis.text.y = element_text(face="bold", color="black", size=12))+theme(axis.title.x = element_text(face="bold", colour = "black", size=12), axis.title.y = element_text(face="bold", colour = "black", size=12))+theme(legend.text=element_text(size=12),legend.title=element_text(size=14))
t+geom_text_repel()
t <- ggplot(pcaData, aes(x = PC1, y = PC2, color = batch, label=name)) +
geom_point(size =3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed() +
ggtitle("PCA with VST data") +theme_bw()+theme(axis.text.x = element_text(face="bold", color="black", size=12),axis.text.y = element_text(face="bold", color="black", size=12))+theme(axis.title.x = element_text(face="bold", colour = "black", size=12), axis.title.y = element_text(face="bold", colour = "black", size=12))+theme(legend.text=element_text(size=12),legend.title=element_text(size=14))
t+geom_text_repel()
t <- cor(assay(vsd))
rownames(t) <- paste(colData(vsd)$batch,rownames(t), sep = " : ")
pheatmap(t)
t <- cor(assay(vsd))
rownames(t) <- paste(colData(vsd)$category,rownames(t), sep = " : ")
pheatmap(t)
dds <- DESeq(dds)
res <- results(dds, contrast=c("batch","covid","mock"), lfcThreshold = 1, alpha = 0.05)
res
metadata(res)$filterThreshold
as_tibble(metadata(res)$filterNumRej) %>%
ggplot(aes(x = theta, y = numRej)) +
geom_point() +
geom_vline(xintercept = 64.12336,
color = 'red')
as_tibble(metadata(res)$filterNumRej)
as_tibble(metadata(res)$filterNumRej) %>%
ggplot(aes(x = theta, y = numRej)) +
geom_point()
as_tibble(metadata(res)$filterNumRej) %>%
ggplot(aes(x = theta, y = numRej)) +
geom_point() +
geom_vline(xintercept = 0.64,
color = 'red')
metadata(res)$filterThreshold
metadata(res)$filterThreshold [1]
metadata(res)$filterThreshold[1]
plotMA(res)
reslfcShrink <- lfcShrink(dds,
coef=2, type = 'apeglm')
plotMA(reslfcShrink)
write.csv(reslfcShrink,"LFCShrink.csv")
View(reslfcShrink)
View(data.frame(reslfcShrink))
gsub("^[0-9]_", "", rownames(res))
gsub("^[0-9][_]", "", rownames(res))
gsub("^[0-9]", "", rownames(res))
gsub("^[0-9]\\_", "", rownames(res))
gsub("^[0-9]|\\_", "", rownames(res))
gsub("^[0-9 & \\_]", "", rownames(res))
gsub("^[0-9\\_]", "", rownames(res))
gsub("^[0-6000]", "", rownames(res))
gsub("^[0-9]", "", rownames(res))
gsub("^.*?_","",rownames(res))
tail(gsub("^.*?_","",rownames(res)))
results <- data.frame(reslfcShrink)
View(results)
results$symbol <- gsub("^.*?_","",rownames(results))
View(results)
resultsNames(dds) # lists the coefficients
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ batch + category)
# setwd("~/assignment3")
library(DESeq2)
library(ggplot2)
library("BiocParallel")
library(org.Hs.eg.db)
library(dplyr)
library(tibble)
library(ggrepel)
library(pheatmap)
library(ComplexHeatmap)
set.seed(1000)
## Reading count file and then making unique row names
file <- read.csv("GSE160435_count.csv")
file$X <- paste0(seq_len(length(file$X)),"_",file$X)
rownames(file) <- file$X
file <- file[,-1]
cts <- as.matrix(file)
coldata <- data.frame(sample=colnames(cts),batch=c("covid","covid","covid","mock","mock","mock"),category=c("20","20","19","20","20","19"))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ batch + category)
## Checking if the levels order is right
dds$batch
## Changing the reference level to mock samples
dds$batch <- relevel(dds$batch, ref = "mock")
dds$batch
vsd = vst(object = dds, blind = TRUE,# do not take the design formula into account; best practice for sample-level QC
fitType = "parametric")
pcaData <- plotPCA(vsd, intgroup = c("batch","category"), returnData = TRUE)
pcaData
percentVar <- round(100 * attr(pcaData, "percentVar"))
## Seeing if samples cluster majorly according to category
t <- ggplot(pcaData, aes(x = PC1, y = PC2, color = category, label=name)) +
geom_point(size =3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed() +
ggtitle("PCA with VST data") +theme_bw()+theme(axis.text.x = element_text(face="bold", color="black", size=12),axis.text.y = element_text(face="bold", color="black", size=12))+theme(axis.title.x = element_text(face="bold", colour = "black", size=12), axis.title.y = element_text(face="bold", colour = "black", size=12))+theme(legend.text=element_text(size=12),legend.title=element_text(size=14))
t+geom_text_repel()
## Seeing if samples cluster majorly according to batch
t <- ggplot(pcaData, aes(x = PC1, y = PC2, color = batch, label=name)) +
geom_point(size =3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed() +
ggtitle("PCA with VST data") +theme_bw()+theme(axis.text.x = element_text(face="bold", color="black", size=12),axis.text.y = element_text(face="bold", color="black", size=12))+theme(axis.title.x = element_text(face="bold", colour = "black", size=12), axis.title.y = element_text(face="bold", colour = "black", size=12))+theme(legend.text=element_text(size=12),legend.title=element_text(size=14))
t+geom_text_repel()
## Another QC plot is correlation heatmap which cluster samples with similar expression profile together. This is a good way to observe if any kind of sample swapping occured or not.
t <- cor(assay(vsd))
rownames(t) <- paste(colData(vsd)$batch,rownames(t), sep = " : ")
pheatmap(t)
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds, contrast=c("batch","covid","mock"), lfcThreshold = 1, alpha = 0.05)
res
metadata(res)$filterThreshold
as_tibble(metadata(res)$filterNumRej) %>%
ggplot(aes(x = theta, y = numRej)) +
geom_point() +
geom_vline(xintercept = 0.64,
color = 'red')
data.frame(reslfcShrink) %>%
filter(!is.na(padj)) %>%
ggplot(aes(x = log2FoldChange, y = -log10(padj),
color = padj < 0.05 & abs(log2FoldChange) > 1)) +
scale_colour_manual(values = c("black", "red")) +
geom_point(size = 0.8) +
geom_hline(yintercept = -log10(0.05)) +
geom_vline(xintercept = 1) +
geom_vline(xintercept = -1)+theme_bw()
knit_with_parameters("~/assignment3/assignment3.Rmd", encoding = "UTF-8")
